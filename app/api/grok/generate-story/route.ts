import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    console.log('üìñ [GROK API] D√©but de la g√©n√©ration d\'histoire')
    
    const { voiceName, fantasyDescription, userName, intensity, duration } = await request.json()
    
    console.log('üìñ [GROK API] Param√®tres re√ßus:', {
      voiceName,
      fantasyDescription: fantasyDescription?.substring(0, 100) + '...',
      userName,
      intensity,
      duration
    })
    
    if (!voiceName || !fantasyDescription) {
      console.error('‚ùå [GROK API] Param√®tres manquants:', { voiceName: !!voiceName, fantasyDescription: !!fantasyDescription })
      return NextResponse.json({ error: 'Voice name and fantasy description are required' }, { status: 400 })
    }

    const apiKey = process.env.GROK_API_KEY
    if (!apiKey) {
      console.error('‚ùå [GROK API] Cl√© API Grok non configur√©e')
      return NextResponse.json({ error: 'Grok API key not configured' }, { status: 500 })
    }

    console.log('‚úÖ [GROK API] Cl√© API Grok trouv√©e')

    // Cr√©er un prompt personnalis√© selon la voix
    const voicePersonalities = {
      'Alex': 'Tu es Alex, un homme charismatique avec une voix chaude et envo√ªtante. Tu es confiant, s√©ducteur et tu sais exactement comment caresser l\'√¢me de ton interlocuteur avec tes mots.',
      'Damien': 'Tu es Damien, un homme myst√©rieux aux murmures doux. Tu es tendre, sensuel et tu excelles dans l\'art de faire frissonner la peau avec tes paroles d√©licates.',
      'Gabriel': 'Tu es Gabriel, un homme magn√©tique √† l\'intensit√© captivante. Tu es passionn√©, intense et tu sais comment √©veiller tous les sens avec ta pr√©sence magn√©tique.'
    }

    const personality = voicePersonalities[voiceName as keyof typeof voicePersonalities] || `Tu es ${voiceName}, une voix s√©ductrice et envo√ªtante.`
    console.log('üé≠ [GROK API] Personnalit√© s√©lectionn√©e:', personality.substring(0, 50) + '...')

    // Ajuster le niveau d'intensit√©
    const intensityLevels = {
      low: 'doux et romantique, avec des sous-entendus subtils',
      medium: 'sensuel et passionn√©, avec une tension √©rotique palpable',
      high: 'intense et explicite, avec une passion d√©bordante'
    }

    let intensityLevel = 'medium'
    if (intensity < 30) intensityLevel = 'low'
    else if (intensity > 70) intensityLevel = 'high'

    console.log('üå°Ô∏è [GROK API] Niveau d\'intensit√©:', intensityLevel, `(${intensity}/100)`)

    // Calculer le nombre de mots approximatif (150 mots par minute de lecture)
    const targetWords = duration * 150
    console.log('üìè [GROK API] Mots cibles:', targetWords, `(${duration} minutes)`)

    const userNameInstruction = userName 
      ? `- L'utilisateur s'appelle ${userName}. Utilise son pr√©nom naturellement dans l'histoire pour cr√©er une connexion personnelle`
      : `- Tu peux t'adresser √† l'utilisateur directement sans utiliser de pr√©nom sp√©cifique`

    console.log('üë§ [GROK API] Instruction nom utilisateur:', userNameInstruction)

    const prompt = `${personality}

Tu vas cr√©er une histoire √©rotique personnalis√©e o√π tu t'adresses directement √† l'utilisateur √† la premi√®re personne. 

CONSIGNES IMPORTANTES :
- Parle directement √† l'utilisateur en utilisant "tu", "toi", "ton/ta"
- Raconte l'histoire comme si tu √©tais pr√©sent avec l'utilisateur
${userNameInstruction}
- Le ton doit √™tre ${intensityLevels[intensityLevel as keyof typeof intensityLevels]}
- L'histoire doit faire environ ${targetWords} mots (${duration} minutes de lecture)
- STYLE ORAL NATUREL : √âcris comme si tu parlais spontan√©ment, pas comme un texte lu
- CONNECTEURS FLUIDES : Utilise des transitions naturelles entre les id√©es
- RYTHME CONVERSATIONNEL : Varie la longueur des phrases pour un d√©bit naturel
- LANGAGE PARL√â : Emploie des expressions et tournures qu'on utilise √† l'oral
- OPTIMIS√â TTS : √âvite abr√©viations et symboles, √©cris tout en toutes lettres
- Cr√©e une progression narrative avec une mont√©e en tension
- Termine par une conclusion satisfaisante

SC√âNARIO DEMAND√â :
${fantasyDescription}

Commence ton histoire maintenant, en t'adressant directement √† l'utilisateur :`

    console.log('üìù [GROK API] Prompt cr√©√©, longueur:', prompt.length, 'caract√®res')
    console.log('üöÄ [GROK API] Appel √† l\'API Grok...')

    const response = await fetch('https://api.x.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        model: 'grok-3-latest',
        stream: false,
        temperature: 0.8,
        max_tokens: Math.min(4000, Math.max(500, targetWords * 2)) // Ajuster selon la dur√©e
      }),
    })

    console.log('üì° [GROK API] R√©ponse Grok:', response.status, response.statusText)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå [GROK API] Erreur Grok:', errorText)
      return NextResponse.json({ error: 'Failed to generate story' }, { status: response.status })
    }

    const data = await response.json()
    console.log('üìä [GROK API] Donn√©es re√ßues:', {
      choices: data.choices?.length || 0,
      hasContent: !!data.choices?.[0]?.message?.content
    })

    const generatedStory = data.choices?.[0]?.message?.content

    if (!generatedStory) {
      console.error('‚ùå [GROK API] Aucune histoire g√©n√©r√©e')
      return NextResponse.json({ error: 'No story generated' }, { status: 500 })
    }

    const wordCount = generatedStory.split(' ').length
    console.log('‚úÖ [GROK API] Histoire g√©n√©r√©e avec succ√®s!')
    console.log('üìà [GROK API] Statistiques:', {
      longueur: generatedStory.length,
      mots: wordCount,
      preview: generatedStory.substring(0, 100) + '...'
    })

    return NextResponse.json({ 
      story: generatedStory,
      metadata: {
        voiceName,
        intensity,
        duration,
        estimatedWords: wordCount
      }
    })

  } catch (error) {
    console.error('‚ùå [GROK API] Erreur g√©n√©rale:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
